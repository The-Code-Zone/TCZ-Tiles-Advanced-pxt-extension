{"files":{"pxt.json":"{\n    \"name\": \"arcade-sprite-data\",\n    \"version\": \"0.2.1\",\n    \"dependencies\": {\n        \"game\": \"*\"\n    },\n    \"files\": [\n        \"CODE_OF_CONDUCT.md\",\n        \"README.md\",\n        \"SECURITY.md\",\n        \"main.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"testDependencies\": {\n        \"device\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"1.11.37\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","CODE_OF_CONDUCT.md":"# Microsoft Open Source Code of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\n\r\nResources:\r\n\r\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\r\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\r\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\r\n","README.md":"## Usage\r\n\r\nThis extensions adds block to store and read data \r\nin sprites. The blocks are added to the bottom of the **sprites** toolbox.\r\n\r\n* Storing numbers\r\n\r\n```blocks\r\nlet mySprite = sprites.create(sprites.food.smallApple, SpriteKind.Player)\r\nsprites.setDataNumber(mySprite, \"life\", 3)\r\nsprites.changeDataNumberBy(mySprite, \"life\", -1)\r\nlet life = sprites.readDataNumber(mySprite, \"life\")\r\n```\r\n\r\n* Storing strings\r\n\r\n```blocks\r\nlet mySprite = sprites.create(sprites.food.smallApple, SpriteKind.Player)\r\nsprites.setDataString(mySprite, \"name\", \"alex\")\r\nlet name = sprites.readDataString(mySprite, \"name\")\r\n```\r\n\r\n* Storing booleans\r\n\r\n```blocks\r\nlet mySprite = sprites.create(sprites.food.smallApple, SpriteKind.Player)\r\nsprites.setDataBoolean(mySprite, \"sleepy\", false)\r\nlet sleepy = sprites.readDataBoolean(mySprite, \"sleepy\")\r\n```\r\n\r\n* Storing sprites\r\n\r\n```blocks\r\nlet alex = sprites.create(sprites.duck.duck1, SpriteKind.Player)\r\nlet steve = sprites.create(sprites.food.smallBurger, SpriteKind.Food)\r\nsprites.setDataSprite(steve, \"other\", alex)\r\n```\r\n* Storing images\r\n\r\n```blocks\r\nlet mySprite = sprites.create(sprites.food.smallApple, SpriteKind.Player)\r\nsprites.setDataImage(mySprite, \"flipped\", sprites.vehicle.carBlueBack)\r\nlet altImage = sprites.readDataImage(mySprite, \"flipped\")\r\n```\r\n\r\n## Use this extension\r\n\r\nThis repository can be added as an **extension** in MakeCode.\r\n\r\n* open [https://arcade.makecode.com/](https://arcade.makecode.com/)\r\n* click on **New Project**\r\n* click on **Extensions** under the gearwheel menu\r\n* search for **https://github.com/microsoft/arcade-sprite-data** and import\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\n#### Metadata (used for search, rendering)\r\n\r\n* for PXT/arcade\r\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}#v0.1.0\");</script>\r\n\r\n","SECURITY.md":"<!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK -->\r\n\r\n## Security\r\n\r\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\r\n\r\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\r\n\r\n## Reporting Security Issues\r\n\r\n**Please do not report security vulnerabilities through public GitHub issues.**\r\n\r\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\r\n\r\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\r\n\r\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \r\n\r\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\r\n\r\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\r\n  * Full paths of source file(s) related to the manifestation of the issue\r\n  * The location of the affected source code (tag/branch/commit or direct URL)\r\n  * Any special configuration required to reproduce the issue\r\n  * Step-by-step instructions to reproduce the issue\r\n  * Proof-of-concept or exploit code (if possible)\r\n  * Impact of the issue, including how an attacker might exploit the issue\r\n\r\nThis information will help us triage your report more quickly.\r\n\r\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\r\n\r\n## Preferred Languages\r\n\r\nWe prefer all communications to be in English.\r\n\r\n## Policy\r\n\r\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\r\n\r\n<!-- END MICROSOFT SECURITY.MD BLOCK -->","main.ts":"namespace sprites {\n    /**\n     * Sets a number in the data of a sprite\n     */\n    //% blockId=spriteDataSetNumber block=\"set $sprite=variables_get data $name to number $value\"\n    //% name.shadow=\"spriteDataNumberNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function setDataNumber(sprite: Sprite, name: string, value: number) {\n        if (!sprite || !name) return;\n        const d = sprite.data;\n        d[name] = value;\n    }\n\n    /**\n     * Change a number in the data of a sprite by a given value\n     */\n    //% blockId=spriteDataChangeNumber block=\"change $sprite=variables_get data $name by number $value\"\n    //% name.shadow=\"spriteDataNumberNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function changeDataNumberBy(sprite: Sprite, name: string, value: number) {\n        if (!sprite || !name) return;\n        const d = sprite.data;\n        d[name] = (d[name] || 0) + value;\n    }\n\n    /**\n     * Gets a number in the data of a sprite\n     */\n    //% blockId=spriteDataGetNumber block=\"$sprite=variables_get data $name as number\"\n    //% name.shadow=\"spriteDataNumberNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function readDataNumber(sprite: Sprite, name: string): number {\n        if (!sprite || !name) return 0;\n        const d = sprite.data;\n        return d[name] as number;\n    }\n\n    /**\n     * Sets a string in the data of a sprite\n     */\n    //% blockId=spriteDataSetString block=\"set $sprite=variables_get data $name to string $value\"\n    //% name.shadow=\"spriteDataStringNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function setDataString(sprite: Sprite, name: string, value: string) {\n        if (!sprite || !name) return;\n        const d = sprite.data;\n        d[name] = value;\n    }\n\n    /**\n     * Gets a number in the data of a sprite\n     */\n    //% blockId=spriteDataGetString block=\"$sprite=variables_get data $name as string\"\n    //% name.shadow=\"spriteDataStringNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function readDataString(sprite: Sprite, name: string): string {\n        if (!sprite || !name) return \"\";\n        const d = sprite.data;\n        return d[name] as string;\n    }\n\n    /**\n     * Sets a boolean in the data of a sprite\n     */\n    //% blockId=spriteDataSetBoolean block=\"set $sprite=variables_get data $name to boolean $value\"\n    //% name.shadow=\"spriteDataBooleanNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function setDataBoolean(sprite: Sprite, name: string, value: boolean) {\n        if (!sprite || !name) return;\n        const d = sprite.data;\n        d[name] = !!value;\n    }\n\n    /**\n     * Gets a boolean in the data of a sprite\n     */\n    //% blockId=spriteDataGetBoolean block=\"$sprite=variables_get data $name as boolean\"\n    //% name.shadow=\"spriteDataBooleanNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function readDataBoolean(sprite: Sprite, name: string): boolean {\n        if (!sprite || !name) return false;\n        const d = sprite.data;\n        return !!d[name];\n    }\n\n    /**\n     * Sets a sprite in the data of a sprite\n     */\n    //% blockId=spriteDataSetSprite block=\"set $sprite=variables_get data $name to sprite $value\"\n    //% name.shadow=\"spriteDataSpriteNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function setDataSprite(sprite: Sprite, name: string, value: Sprite) {\n        if (!sprite || !name) return;\n        const d = sprite.data;\n        d[name] = value;\n    }\n\n    /**\n     * Gets a sprite in the data of a sprite\n     */\n    //% blockId=spriteDataGetSprite block=\"$sprite=variables_get data $name as sprite\"\n    //% name.shadow=\"spriteDataSpriteNameShadow\"\n    //% group=\"Data\"\n    //% weight=10\n    //% blockGap=8\n    export function readDataSprite(sprite: Sprite, name: string): Sprite {\n        if (!sprite || !name) return undefined;\n        const d = sprite.data;\n        return d[name] as Sprite;\n    }\n\n\n    /**\n     * Sets an Image in the data of a sprite.\n     * Deprecated. Use setDataImageValue instead\n     */\n    //% blockId=spriteDataSetImage block=\"set $sprite=variables_get data $name to image $value\"\n    //% name.shadow=\"spriteDataImageNameShadow\"\n    //% group=\"Data\"\n    //% deprecated=1\n    //% weight=9\n    //% blockGap=8\n    export function setDataImage(sprite: Sprite, name: string, value: Image) {\n        setDataImageValue(sprite, name, value);\n    }\n\n    /**\n     * Sets an Image in the data of a sprite\n     */\n    //% blockId=spriteDataSetImageValue block=\"set $sprite data $name to image $value\"\n    //% name.shadow=\"spriteDataImageNameShadow\"\n    //% group=\"Data\"\n    //% sprite.shadow=variables_get\n    //% value.shadow=screen_image_picker\n    //% weight=9\n    //% blockGap=8\n    export function setDataImageValue(sprite: Sprite, name: string, value: Image) {\n        if (!sprite || !name) return;\n        const d = sprite.data;\n        d[name] = value;\n    }\n\n    /**\n     * Gets a sprite in the data of a sprite\n     */\n    //% blockId=spriteDataGetImage block=\"$sprite=variables_get data $name as image\"\n    //% name.shadow=\"spriteDataImageNameShadow\"\n    //% group=\"Data\"\n    //% weight=9\n    //% blockGap=8\n    export function readDataImage(sprite: Sprite, name: string): Image {\n        if (!sprite || !name) return undefined;\n        const d = sprite.data;\n        return d[name] as Image;\n    }\n\n\n    //% block=\"$name\"\n    //% blockId=spriteDataNumberNameShadow\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"spritedatanumber\"\n    export function _numberNameShadow(name: string) {\n        return name\n    }\n\n    //% block=\"$name\"\n    //% blockId=spriteDataSpriteNameShadow\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"spritedatasprite\"\n    export function _spriteNameShadow(name: string) {\n        return name\n    }\n\n    //% block=\"$name\"\n    //% blockId=spriteDataBooleanNameShadow\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"spritedataboolean\"\n    export function _booleanNameShadow(name: string) {\n        return name\n    }\n\n    //% block=\"$name\"\n    //% blockId=spriteDataStringNameShadow\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"spritedatastring\"\n    export function _stringNameShadow(name: string) {\n        return name\n    }\n\n    //% block=\"$name\"\n    //% blockId=spriteDataImageNameShadow\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"spritedataimage\"\n    export function _imageNameShadow(name: string) {\n        return name\n    }\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\nconst alex = sprites.create(sprites.duck.duck1, SpriteKind.Player)\nalex.setFlag(SpriteFlag.BounceOnWall, true)\nsprites.setDataString(alex, \"name\", \"alex\")\nsprites.setDataNumber(alex, \"points\", 0)\nsprites.setDataBoolean(alex, \"sleepy\", false)\nsprites.setDataImage(alex, \"flipped\", sprites.vehicle.carBlueBack)\n\nconst steve = sprites.create(sprites.food.smallBurger, SpriteKind.Food)\nsprites.setDataString(steve, \"name\", \"steve\")\nsprites.setDataNumber(steve, \"points\", 0)\nsprites.setDataBoolean(steve, \"sleepy\", false)\nsprites.setDataSprite(steve, \"other\", alex)\nsteve.setFlag(SpriteFlag.BounceOnWall, true)\n\nalex.setVelocity(Math.randomRange(-50, 50), Math.randomRange(-50, 50))  \nsteve.setVelocity(Math.randomRange(-50, 50), steve.vy + Math.randomRange(-50, 50))  \n\nsprites.onOverlap(SpriteKind.Player, SpriteKind.Food, function (sprite: Sprite, otherSprite: Sprite) {\n    sprite.say(`hi ${sprites.readDataString(otherSprite, \"name\")}`, 300)  \n    const other = sprites.readDataSprite(otherSprite, \"other\")\n    otherSprite.say(`hi ${sprites.readDataString(sprite, \"name\")} ${!!other}`, 300)\n\n    sprites.changeDataNumberBy(sprite, \"points\", 1)\n    sprites.changeDataNumberBy(otherSprite, \"points\", 1)\n\n    const otherImage = sprites.readDataImage(sprite, \"flipped\")\n    if (otherImage) {\n        sprites.setDataImage(sprite, \"flipped\", sprite.image)\n        sprite.setImage(otherImage)\n    }\n})\n\ngame.onUpdateInterval(1000, function () {\n    alex.say(`${sprites.readDataNumber(alex, \"points\")}, ${sprites.readDataBoolean(alex, \"sleepy\")} sleepy`)\n})"}}